#!/usr/bin/env bash

git_repos_update() {
    echo -e "\e[1m[*] Git repos:\e[0m"
    repos=($(find $HOME/files/Dev/repos -maxdepth 2 -type d -name ".git" | sed 's/.git//'))

    for i in "${repos[@]}"
    do
        echo "[*] $(basename $i) repo:"
        pushd "$i" > /dev/null

        git pull --rebase
        git submodule foreach git pull

        popd > /dev/null
    done
}

git_bare_repos_update() {
    echo -e "\e[1m[*] Git bare repos:\e[0m"
    repos=($(find $HOME/files/Dev -maxdepth 3 -type f -name "HEAD" | grep -v ".git" | sed 's/HEAD//'))

    for i in "${repos[@]}"
    do
        echo "[*] $(basename $i) repo:"
        pushd "$i" > /dev/null

        git fetch --all
        worktrees=($(git worktree list | grep "\[.*\]" | cut -d' ' -f1))
        remotes=$(git remote -v | grep "upstream")

        for j in "${worktrees[@]}"
        do
            pushd "$j" > /dev/null
            wk_name=$(basename $PWD)
            echo "[-] Worktree $wk_name:"

            if [ $wk_name == "main" ]; then
                git reset --hard HEAD
                git pull --rebase
                continue
            fi

            # Get type: pr or other
            wt_type="$(echo $wk_name | cut -d'-' -f1)"
            # Get pr id (or remaining part)
            wt_pr_id="$(echo $wk_name | cut -d'-' -f2)"

            # Get PR nb from the branch name
            if [ $wt_type == "pr" ]; then
                gh pr checkout -b $wk_name --force $wt_pr_id
                continue
            fi

            echo "skipped"
            popd > /dev/null
        done

        popd > /dev/null
    done
}

rustup_update() {
    rustup_path="$(whereis rustup -b | cut -d' ' -f2)"
    [ -n $rustup_path ] || return
    echo -e "\e[1m\n[*] Rustup:\e[0m"
    rustup update
}

# Builds

build_neovim() {
    echo -e "\e[1m\n[*] Build Neovim:\e[0m"
    [ -f $HOME/.local/bin/build-neovim ] && $HOME/.local/bin/build-neovim
}

# Updates
git_repos_update
git_bare_repos_update
rustup_update

# Builds
build_neovim
