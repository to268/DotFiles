#!/usr/bin/env bash

# Build options
workdir=$HOME/llvm-release
install_path="/usr/local/llvm"
linker_name="$($HOME/.local/bin/get-linker)"
projects="bolt;clang;clang-tools-extra;cross-project-tests;libclc;lld;lldb;mlir;openmp;polly"
runtimes="compiler-rt;libcxx;libcxxabi;libunwind;pstl"

# I can only use system compilers, sadly
clang_c_path=$(whereis clang | cut -d' ' -f2)
clang_cxx_path=$(whereis clang++ | cut -d' ' -f2)
gcc_c_path=$(whereis gcc | cut -d' ' -f2)
gcc_cxx_path=$(whereis g++ | cut -d' ' -f2)
[ ! -z $clang_c_path ] && cc_path=$clang_c_path || cc_path=$gcc_c_path
[ ! -z $clang_cxx_path ] && cxx_path=$clang_cxx_path || cxx_path=$gcc_cxx_path

echo "[*] Fetching latest tag"
release_tag="$(curl -s "https://github.com/llvm/llvm-project/releases" -o - | grep -Po '(?<=href=")[^"]*' | grep "^/llvm/llvm-project/releases/tag/" | grep -v "rc" | head -n1 | xargs basename)"

echo "[*] Cloning repo at $release_tag"
git clone --depth 1 https://github.com/llvm/llvm-project.git -b $release_tag $workdir

echo "[*] Compiling llvm-project"
pushd $workdir > /dev/null
ulimit -n 16384

cmake -G "Ninja" -S llvm -B build -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER=$cc_path \
-DCMAKE_CXX_COMPILER=$cxx_path -DLLVM_USE_LINKER=$linker_name -DLLVM_OPTIMIZED_TABLEGEN=ON \
-DLLVM_ENABLE_PROJECTS=$projects -DLLVM_ENABLE_RUNTIMES=$runtimes -DLLVM_PARALLEL_LINK_JOBS=6 \
-DLLVM_ENABLE_LTO=Thin -DLLVM_BINUTILS_INCDIR=/usr/include -DLLVM_ENABLE_ZSTD=ON \
-DLLVM_INSTALL_UTILS=ON -DLLVM_EXPERIMENTAL_TARGETS_TO_BUILD="all" \
-DCMAKE_INSTALL_PREFIX=$install_path

cd build
time ninja && time ninja check-all
sudo rm -rf "$install_path/*" && sudo ninja install

popd > /dev/null
rm -rf $workdir

echo "[*] Done"
